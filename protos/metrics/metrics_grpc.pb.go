// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protos/metrics/metrics.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricsV1_Send_FullMethodName = "/metrics.MetricsV1/send"
)

// MetricsV1Client is the client API for MetricsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsV1Client interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MetricV1, Empty], error)
}

type metricsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMetricsV1Client(cc grpc.ClientConnInterface) MetricsV1Client {
	return &metricsV1Client{cc}
}

func (c *metricsV1Client) Send(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MetricV1, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetricsV1_ServiceDesc.Streams[0], MetricsV1_Send_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MetricV1, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricsV1_SendClient = grpc.ClientStreamingClient[MetricV1, Empty]

// MetricsV1Server is the server API for MetricsV1 service.
// All implementations must embed UnimplementedMetricsV1Server
// for forward compatibility.
type MetricsV1Server interface {
	Send(grpc.ClientStreamingServer[MetricV1, Empty]) error
	mustEmbedUnimplementedMetricsV1Server()
}

// UnimplementedMetricsV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsV1Server struct{}

func (UnimplementedMetricsV1Server) Send(grpc.ClientStreamingServer[MetricV1, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMetricsV1Server) mustEmbedUnimplementedMetricsV1Server() {}
func (UnimplementedMetricsV1Server) testEmbeddedByValue()                   {}

// UnsafeMetricsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsV1Server will
// result in compilation errors.
type UnsafeMetricsV1Server interface {
	mustEmbedUnimplementedMetricsV1Server()
}

func RegisterMetricsV1Server(s grpc.ServiceRegistrar, srv MetricsV1Server) {
	// If the following call pancis, it indicates UnimplementedMetricsV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricsV1_ServiceDesc, srv)
}

func _MetricsV1_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsV1Server).Send(&grpc.GenericServerStream[MetricV1, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricsV1_SendServer = grpc.ClientStreamingServer[MetricV1, Empty]

// MetricsV1_ServiceDesc is the grpc.ServiceDesc for MetricsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricsV1",
	HandlerType: (*MetricsV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "send",
			Handler:       _MetricsV1_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/metrics/metrics.proto",
}
